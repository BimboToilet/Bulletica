name: C# Linter
on: [push, pull_request]

jobs:
  linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      - name: Cache dotnet-format
        id: cache-dotnet-format
        uses: actions/cache@v4
        with:
          path: ~/.dotnet/tools
          key: dotnet-format 
          restore-keys: |
            dotnet-format
            
      - name: Install dotnet-format
        if: steps.cache-dotnet-format.outputs.cache-hit != 'true'
        run: dotnet tool install -g dotnet-format

      - name: Create temporary project file
        run: |
          cat << 'EOF' > Assembly-CSharp.csproj
          <Project Sdk="Microsoft.NET.Sdk">
            <PropertyGroup>
              <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
            </PropertyGroup>
            <ItemGroup>
              <Compile Include="**/*.cs" />
            </ItemGroup>
          </Project>
          EOF

      - name: Run soft dotnet-format
        run: |
          output=$(dotnet-format --no-restore --include "**/*.cs" --check --verbosity diagnostic 2>&1 || true)
        
          clean_output=$(echo "$output" | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g" | sed 's/\r//g' | sed 's/\x0//g' | sed 's/[[:space:]]+/ /g' | tr -cd '\11\12\15\40-\176')

          echo "$clean_output" | grep -E "error|warning" | while read line; do
            if [[ $line =~ ([^\(]+)\(([0-9]+),([0-9]+)\):\s*(error|warning)\s*([A-Za-z0-9]+):\s*(.*) ]]; then
              file="${BASH_REMATCH[1]}"
              line_num="${BASH_REMATCH[2]}"
              type="${BASH_REMATCH[4]}"
              code="${BASH_REMATCH[5]}"
              message="${BASH_REMATCH[6]}"
              echo "::$type file=$file,line=$line_num,code=$code::$message"
            elif [[ $line =~ ([^\(]+)\(([0-9]+),([0-9]+)\):\s*(.*) ]]; then
              file="${BASH_REMATCH[1]}"
              line_num="${BASH_REMATCH[2]}"
              message="${BASH_REMATCH[4]}"
              echo "::warning file=$file,line=$line_num::$message"
            else
              echo "::warning::$line"
            fi
          done
